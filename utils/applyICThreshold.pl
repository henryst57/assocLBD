#!/usr/bin/perl
#   applyICThreshold.pl
#
# Thresholds the target term list by removing any terms with IC less than or 
# equal to the lower threshold provided, and any terms with IC greater than 
# the upper threshold provided.  Uses the target term list, icpropogation file,
# and threshold provided as input. Will also remove any out of vocabulary 
# terms (those that do not occur in the IC file) unless told to keep them.
#
# Either an upper, lower, or both threshold should be specified. The program 
# expects non-intrinsic IC file by default. The program will remove out of 
# vocabulary terms (those that do not occur in the IC file) by default.
#
# usage: perl applyICThreshold.pl -termFile=<termFile> -icFile=<icFile> -outputFile=<outputFile> -upperThreshold=<threshold> -lowerThreshold=<threshold> -instrinsic -keepOutOfVocab
#
# example: perl applyICThreshold.pl -termFile=../ic/rayFish_ltc -icFile=../ic/essie.snomedctmsh.pc.ic -outputFile=rayFish_ltc_snomedctmsh -upperThreshold=0.1 -lowerThreshold=0.0 -intrinsic -keepOutOfVocab
#
# Parameters:
#   termFile = the target term file output by LBD that is being thresholded
#   icFile = the IC propogation file generated by 
#        UMLS::Similarity::create-icpropagation.pl
#   outputFile = the target term list after an IC threshold has been applied
#   lowerThreshold = the lower IC threshold to apply (optional). Any terms with
#        an IC less than or equal to the threshold are eliminated. Thresholds 
#        must be >= 0 and <= 1
#   upperThreshold = the upper IC threshold to apply (optional). Any terms with 
#        an IC greather than the threshold are eliminated. Thresholds must be
#        >= 0  and <= 1.0
#   intrinsic = tells the program to read an intrinsic IC file (different 
#        formatting)
#   keepOutOfVocab = tells the program to keep out of vocabulary CUIs (those
#        that do not occur in the IC file)

use strict;
use warnings;
use Getopt::Long;

my $DEBUG = 0;
my $HELP = '';
my $intrinsic;
my $keepOutOfVocab;
my %options = ();

GetOptions( 'debug'             => \$DEBUG, 
            'help'              => \$HELP,
            'termFile=s'        => \$options{'termFile'},
	    'icFile=s'          => \$options{'icFile'},
	    'outputFile=s'      => \$options{'outputFile'},
	    'lowerThreshold=s'  => \$options{'lowerThreshold'},
	    'upperThreshold=s'  => \$options{'upperThreshold'},
            'intrinsic'         => \$intrinsic,
	    'keepOutOfVocab'    => \$keepOutOfVocab
);

if ($HELP) {
    &showHelp();
    exit;
}  

#input checking
(exists $options{'termFile'}) or die ("ERROR: termFile must be specified\n");
open TERM_IN, $options{'termFile'} or 
    die ("ERROR: unable to open termFile file: $options{termFile}\n");

(exists $options{'icFile'}) or die ("ERROR: icFile must be specified\n");
open IC_IN, $options{'icFile'} or 
    die ("ERROR: unable to open termFile file: $options{icFile}\n");

(exists $options{'outputFile'}) or die ("ERROR: outputFile must be specified\n");
open OUT, '>'.$options{'outputFile'} or 
    die ("ERROR: unable to open output file: $options{outputFile}\n");

((exists $options{'upperThreshold'} || exists $options{'lowerThreshold'}) 
 or die ("ERROR: upper and/or lower threshold must be specified\n"));
if ($options{'upperThreshold'} <  0 || $options{'upperThreshold'} > 1) {
    die ("ERROR: thresholds should be >= than 0 and less <= than 1");
}
if ($options{'lowerThreshold'} <  0 || $options{'lowerThreshold'} > 1) {
    die ("ERROR: thresholds should be >= than 0 and <= than 1");
}
if ($options{'lowerThreshold'} && $options{'upperThreshold'}) {
    if ($options{'lowerThreshold'} >= $options{'upperThreshold'}) {
	die ("ERROR: lowerThreshold must be < upperThreshold: $options{lowerThreshold}, $options{upperThreshold}\n");
    }
}

#set defaults
if (! (defined $options{'upperThreshold'})) {
    $options{'upperThreshold'} = 9999999999;
}
print "                  $options{lowerThreshold}\n";
if (!(defined $options{'lowerThreshold'})) {
    $options{'lowerThreshold'} = -1;
}



##############################
# Begin Code
##############################

########################
### Target Term File
print "   Applying thresholds of $options{lowerThreshold} to $options{upperThreshold} to $options{termFile}\n";


#skip the header stuff in the target term file, but save for output later
my @headerLines = ();
my $position = 0;
while (my $line = <TERM_IN>) {
    #see if its a header line
    if ($line =~ /1\t\d+\.\d+\tC\d{7}\t/) {
	last;
    }
    push @headerLines, $line;

    #update current position of file handle
    $position = tell(TERM_IN);
}
#move the file handle back one line so you don't skip the first CUI line
seek(TERM_IN, $position, 0);

#read in the target term list as a hash: key is the CUI and value is the rank
# also read in each line for output later: key is CUI and value is line
my %targetTermList = ();
my %lines = ();
while (my $line = <TERM_IN>) {
    #split line to get CUI and score
    # line is rank\tscore\tCUI\tterms
    my @vals = split(/\t/,$line);
    (scalar @vals == 4) or die ("Formatting Error in TermFile: $line\n");
    #vals = rank, score, cui, term

    #set hash to be the hash{CUI}=score
    $targetTermList{$vals[2]} = $vals[0];
    $lines{$vals[2]} = $line;
}
close TERM_IN;


########################
#### IC FILE
print "   IC is coming from $options{icFile}\n";

#skip header info for IC file
$position = 0;
while (my $line = <IC_IN>) {
    if ($line =~ /C\d{7}/) {
	last;
     }
    #update current position of file handle
    $position = tell(IC_IN);
}
#move the file handle back one line so you don't skip the first CUI line
seek(IC_IN, $position, 0); 

=comment #TODO - delete this Manually skip ic header
my $header = <IC_IN>;
$header = <IC_IN>;
$header = <IC_IN>;
$header = <IC_IN>;
=cut

#Read the IC files, and copy terms over that fall between the 
# upper and lower thresholds. Also, delete terms from the 
# target term list as they are seen in the IC file. Doing
# this marks them as seen. Following the loop, all terms
# that remain in the target term list were not present in
# the IC file, which indicates they are not present in the
# vocabulary. Either copy these over, or don't depending
# on the $keepOutOfVocab option
#IC files for intrinsic and non-intrinsic are formatted 
# differently, so there are two loops here
#Read IC file (not intrinsic IC file)
my %thresholdedTargetTermList = ();
my $upperRemoved = 0; #record number upper threshold removed
my $lowerRemoved = 0; #record number lower threshold removed
my $startNumTerms = scalar keys %targetTermList;
if (!$intrinsic) {
    #get the information content for each target term from the ICfile
    # and if the IC is less than the threshold, remove it from the target
    # term list hash
    while (my $line = <IC_IN>) {
	#read the line and get CUI and IC from it
	# line is CUI<>IC
	chomp $line;
	my @vals = split(/<>/,$line);
	(scalar @vals == 2) or die ("Formatting Error in ICFile: $line\n");

	#see if the CUI is one of the target terms
	if (exists $targetTermList{$vals[0]}) {
	    #the cui is a target term so see if it should be kept based on its IC
	    if ($vals[1] > $options{'lowerThreshold'} 
		&& $vals[1] <= $options{'upperThreshold'}) {
		#cui is within bounds, keep it
		$thresholdedTargetTermList{$vals[0]} = $targetTermList{$vals[0]};
	    } else {
		#cui is out of bounds, record why it was removed
		if ($vals[1] <= $options{'lowerThreshold'}) {
		    $lowerRemoved++;
		}
		if($vals[1] > $options{'upperThreshold'}) {
		    $upperRemoved++;
		}
	    }

	    #delete from target term list to mark as seen
	    delete $targetTermList{$vals[0]};
	}
    }
    close IC_IN;

} else { #read intrinsic IC file
   #get the information content for each target term from the ICfile
   # and if the IC is less than the threshold, remove it from the target
    # term list hash
    while (my $line = <IC_IN>) {
	#read the line and get CUI and IC from it
	# line is either just a CUI (no IC exists for it) or it is 
	# the text: The intrinsic information content of  (<CUI>) is <value>

	#grab the cui
	chomp $line;
	$line =~ /(C\d{7})/;
	my $cui = $1;

	if (!$cui) {
	    print STDERR "Warning: error grabbing CUI from line: $line\n";
	    next;
	}

	#grab the value if it exists
	my $value = -1;
	if ($line =~ /The intrinsic information content of  \(C\d{7}\) is (\d+\.?\d*)/) {
	    $value = $1;
	}
	if ($value != -1) {
	    #print STDERR "$cui value = $value\n";
	}

	#see if the CUI is one of the target terms
	if (exists $targetTermList{$cui}) {
	    #the cui is a target term so see if it should be kept based on its IC
	    # if the CUI has no IC (vale = -1), then keep it
	    if ($value > $options{'lowerThreshold'} && $value <= $options{'upperThreshold'}) {
		$thresholdedTargetTermList{$cui} = $targetTermList{$cui};
	    } else {
		#cui is out of bounds, record why it was removed
		if ($value <= $options{'lowerThreshold'}) {
		    $lowerRemoved++;
		}
		if($value > $options{'upperThreshold'}) {
		    $upperRemoved++;
		}
	    }

	    #delete from target term list to mark as seen
	    delete $targetTermList{$cui};
	}
    }
    close IC_IN;
} #End reading IC files

#copy out of vocab words over if needed
# since all in vocab words were removed from the target term
# list, we just copy all remaining cuis over
if ($keepOutOfVocab) {
    foreach my $cui (keys %targetTermList) {
	$thresholdedTargetTermList{$cui} = $targetTermList{$cui};
    }
}

#TODO - delete this #print out Out of Vocabulary CUIs
=comment
foreach my $cui (keys %targetTermList) {
    print STDERR "$cui - $targetTermList{$cui}\n";
}
=cut


#print numbers removed
print "   Threshold Complete:\n";
print "      lower removed: $lowerRemoved\n";
print "      upper removed: $upperRemoved\n";
print "      out of vocab: ".(scalar keys %targetTermList)."\n";
print "      keeping: ".(scalar keys %thresholdedTargetTermList)." out of $startNumTerms\n";

#######################
### Output
print "   outputting to $options{outputFile}\n";

#output the header info to the new target term list file
foreach my $line(@headerLines) {
    print OUT $line;
}

#output the target term list now that IC threshold has been applied
# but be sure to output using ascending rank
# also put the new ranks, now that thresholds have been applied
my $rank = 1;
foreach my $key(sort { $thresholdedTargetTermList{$a} <=> $thresholdedTargetTermList{$b} } keys %thresholdedTargetTermList) {
    #get values from the line
    my @vals = split(/\t/,$lines{$key});
    #vals = rank, score, cui, term
    
    #print out the line, but use the new rank
    print OUT "$rank\t$vals[1]\t$vals[2]\t$vals[3]";
    $rank++;
}
close OUT;

#Finished
print "DONE!\n";


#######################
### Help method
# method to show help
sub showHelp() {
    print "This utility thresholds the target term list by removing any\n";
    print "terms with IC less than or equal to the lower threshold\n";
    print "provided, and any terms with IC greater than the upper threshold\n";
    print "provided.  Uses the target term list, icpropogation file, and\n";
    print "threshold provided as input. Will also remove any out of\n";
    print "vocabulary terms (those that do not occur in the IC file) unless\n";
    print "told to keep them.\n";
    print "\n";
    print "Either an upper, lower, or both threshold should be specified.\n";
    print "The program expects non-intrinsic IC file by default. The \n";
    print "program will remove out of vocabulary terms (those that do not\n";
    print "occur in the IC file) by default.\n";
    print "\n";
    print "usage: perl applyICThreshold.pl -termFile=<termFile> -icFile=<icFile> -outputFile=<outputFile> -upperThreshold=<threshold> -lowerThreshold=<threshold> -instrinsic -keepOutOfVocab\n";
    print "\n";
    print "example: perl applyICThreshold.pl -termFile=../ic/rayFish_ltc -icFile=../ic/rayFish_ltc.sm.iic -outputFile=rayFish_ltc_ic3 -upperThreshold=0.1 -lowerThreshold=0.0 -intrinsic -keepOutOfVocab\n";
    print "\n";
    print "Parameters:\n";
    print "termFile = the target term file output by LBD that is being \n";
    print "     thresholded\n";
    print "icFile = the IC propogation file generated by \n";
    print "     UMLS::Similarity::create-icpropagation.pl\n";
    print "outputFile = the target term list after an IC threshold has been \n";
    print "     applied\n";
    print "lowerThreshold = the lower IC threshold to apply (optional). Any \n";
    print "     terms with an IC less than or equal to the threshold are \n";
    print "     eliminated. Thresholds must be >= 0 and <= 1\n"; 
    print "upperThreshold = the upper IC threshold to apply (optional). Any\n";
    print "     terms with an IC greather than the threshold are eliminated.\n";
    print "     Thresholds must be >= 0 and <= 1.0\n";
    print "intrinsic = tells the program to read an intrinsic IC file \n";
    print "     (different formatting)\n";
    print "keepOutOfVocab = tells the program to keep out of vocabulary CUIs\n";
    print "     (those that do not occur in the IC file)\n";
    print "\n";
    print "General Options:\n\n";
    print "--help               displays help, a quick summary of program\n"; 
    print "                     options\n";
};
