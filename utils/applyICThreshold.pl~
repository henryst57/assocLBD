# thresholds the target term list by removing any terms with IC greater than the threshold provided. Uses the target term list, icpropogation file, and threshold provided as input
#
# usage: perl removeWithIC.pl -termFile=<termFile> -icFile=<icFile> -outputFile=<outputFile> -threshold=<threshold>
#
# example: perl removeWithIC.pl TODO
#
# Parameters:
#   termFile = the target term file output by LBD that is being thresholded
#   icFile = the IC propogation file generated by UMLS::Similarity::create-icpropagation.pl
#   outputFile = the target term list after an IC threshold has been applied
#   threshold = the IC threshold to apply. Any terms with an IC greater than the threshold are eliminated. Threshold must be greater than 0 and less than 1


use strict;
use warnings;

my $DEBUG = 0;
my $HELP = '';
my %options = ();

GetOptions( 'debug'             => \$DEBUG, 
            'help'              => \$HELP,
            'termFile=s'        => \$options{'termFile'},
	    'icFile=s'          => \$options{'icfile'},
	    'outputFile=s'      => \$options{'outputFile'},
	    'threshold=s'       => \$options{'threshold'},
);

#input checking
(exists $options{'termFile'}) or die ("termFile must be specified\n");
open TERM_IN, $options{'termFile'} or 
    die ("ERROR: unable to open termFile file: $options{termFile}\n");

(exists $options{'icFile'}) or die ("icFile must be specified\n");
open IC_IN, $options{'icFile'} or 
    die ("ERROR: unable to open termFile file: $options{icFile}\n");

(exists $options{'outputFile'}) or die ("outputFile must be specified\n");
open OUT, '>'.$options{'outputFile'} or 
    die ("ERROR: unable to open output file: $options{outputFile}\n");

(exists $options{'threshold'} or die ("threshold must be specified\n"));
if ($options{'threshold'} <= 0 || $options{'threshold'} >= 1) {
    die ("ERROR: threshold should be greater than 0 and less than 1");
}


##############################
# Begin Code
##############################

#skip the header stuff in the target term file, but save for output later
my @headerLines = ();
while (my $line = <TERM_IN>) {
    push @headerLine $line;
    if ($line =~ /1\t\d+\.\d+\tC\d{7}\t/) {
	last;
    }
}

#read in the target term list as a hash: key is the CUI and value is the score
# also read in each line for output later: key is CUI and value is line
my %targetTermList = ();
my %lines = ();
while (my $line = <TERM_IN>) {
    #split line to get CUI and score
    # line is rank\tscore\tCUI\tterms
    my @vals = split(/\t/,$line);
    (scalar @vals == 4) or die ("Formatting Error in TermFile: $line\n");

    #set hash to be the hash{CUI}=score
    $targetTermList{$vals[2]} = $vals[1];
    $lines{$vals[2]} = $line;
}
close TERM_IN;

#get the information content for each target term from the ICfile
# and if the IC is less than the threshold, remove it from the target
# term list hash
while (my $line = <IC_IN>) {
    #read the line and get CUI and IC from it
    # line is CUI<>IC
    my @vals = split(/<>/,$line);
    (scalar @vals == 2) or die ("Formatting Error in ICFile: $line\n");

    #see if the CUI is one of the target terms
    if (exists $targetTermList{$vals[0]}) {
	#the cui is a target term so see if it should be kept based on its IC
	if ($vals[1] > $options{'threshold'}) {
	    delete $targetTermList{$vals[0]};
	}
    }
}
close IC_IN;

#output the header info to the new target term list file
foreach my $line(@headerLines) {
    print OUT $line;
}

#output the target term list now that IC threshold has been applied
# but be sure to output using descending score
# TODO, always descending score?
foreach my $key(sort { $targetTermList{$b} <=> $targetTermList{$a} } keys %hash) {
    print OUT $lines{$key};
}
close OUT;

#Finished
print "DONE!\n";
